<resources>

    <!-- Base application theme. -->
    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
        <!-- Customize your theme here. -->
        <item name="colorPrimary">@color/colorPrimary</item>
        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
        <item name="colorAccent">@color/colorAccent</item>
    </style>
    
    <style name="MaterialTheme" parent="Theme.MaterialComponents.Light.NoActionBar">
        <item name="android:statusBarColor">#000</item>
    </style>

    <style name="SplashTheme" parent="Theme.MaterialComponents.Light.NoActionBar">
        <item name="android:windowBackground">@drawable/splash_background</item>
        <item name="android:windowNoTitle">true</item>
        <item name="android:windowFullscreen">true</item>
    </style>

    <!-- Style for material design 'Spinner'-->
    <style name="AppTheme.ExposedDropdownMenu" parent="Widget.MaterialComponents.TextInputLayout.OutlinedBox.ExposedDropdownMenu">
        <!-- color of box ONLY, not dropdown -->
        <item name="boxBackgroundColor">#00FFFFFF</item>
        <!-- the box outline color depending on state
             (default, enabled, hovered, focused, but NOT error) -->
        <item name="boxStrokeColor">@color/box_stroke</item>
        <!-- the hint INSIDE the box, before focusing the TextInputEditText -->
        <item name="android:textColorHint">@color/darkBgTextColor</item>
        <!-- the hint ON TOP of the box, when the TextInputEditText is focused -->
        <item name="hintTextColor">@color/bgColor</item>
        <!-- Gain access to additional styling for the child AutoCompleteTextView,
             which includes this spinner's dropdown/popup menu -->
        <item name="materialThemeOverlay">@style/AppTheme.ExposedDropdownMenu.MaterialThemeOverlay</item>
    </style>

    <!-- customization of the material theme for use as
         an overlay for the ExposedDropdownMenu style  -->
    <style name="AppTheme.ExposedDropdownMenu.MaterialThemeOverlay" parent="Theme.MaterialComponents.Light.DarkActionBar">
        <!-- background color of dropdown (popup) items -->
        <item name="colorSurface">@color/compColor</item>
        <item name="android:colorControlHighlight">@color/bgColor</item>
        <!--
         When this overlay is applied, the AutoCompleteTextView
         loses padding. Luckily, we can restore it by defining
         a style that should be applied to all AutoCompleteTextView(s)
         in this theme/overlay
         -->
        <item name="autoCompleteTextViewStyle">@style/AppTheme.ExposedDropdownMenu.AutoCompleteStyle</item>
    </style>

    <!-- style the AutoCompleteTextView of our material spinner -->
    <style name="AppTheme.ExposedDropdownMenu.AutoCompleteStyle">
        <!-- restore padding to sanity -->
        <item name="android:textColor">#FFFFFF</item>
        <item name="android:textSize">16sp</item>
        <item name="android:textColorHint">@color/darkBgTextColor</item>
<!--        <item name="android:hint">State</item>-->
        <item name="android:paddingLeft">12dp</item>
        <item name="android:paddingRight">12dp</item>
        <item name="android:paddingTop">16dp</item>
        <item name="android:paddingBottom">16dp</item>
    </style>

    <!-- style for material spinner 'item' layout -->
    <style name="MaterialSpinnerItem" parent="Widget.AppCompat.TextView">
        <item name="android:color">@color/darkBackground</item>
        <item name="android:textColor">@color/darkBackground</item>
        <item name="android:text">Building</item>
        <item name="android:ellipsize">end</item>
        <item name="android:maxLines">1</item>
        <item name="android:paddingLeft">12dp</item>
        <item name="android:paddingRight">12dp</item>
        <item name="android:paddingTop">16dp</item>
        <item name="android:paddingBottom">16dp</item>

    </style>
    
    <!-- style for progress bars-->
    <style name="progressBarColour" parent="Widget.AppCompat.ProgressBar">
        <item name="colorControlActivated">@color/colorPrimary</item>
    </style>

</resources>
